@model ITWorkLogs.Models.Sync

@{
    ViewBag.Title = "Edit";
}

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
    <h3 class="modal-title">Edit task</h3>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SynchId)
    @Html.HiddenFor(m => m.Others)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.TimeStarted)
    @Html.HiddenFor(m => m.TimeEnded)
    @Html.HiddenFor(m => m.DateIn)
    @Html.HiddenFor(m => m.CreatedBy)
    @Html.HiddenFor(m => m.DateCreated)

    <div class="modal-body">
        <div class="form-horizontal">
            <div class="form-group">
                @Html.LabelFor(model => model.Personnel, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Personnel, (SelectList)ViewBag.Name, htmlAttributes: new { @style = "text-transform:uppercase", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Personnel, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Branches, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Branches, (SelectList)ViewBag.branchesList, htmlAttributes: new { @style = "text-transform:uppercase", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Branches, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Reason, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Reason, new { htmlAttributes = new { @style = "text-transform:uppercase", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Reason, "", new { @class = "text-danger" })
                </div>
            </div> 
            <div class="form-group">
                @Html.LabelFor(model => model.Downloading, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Downloading, new { htmlAttributes = new { @style = "text-transform:uppercase", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Downloading, "", new { @class = "text-danger" })
                </div>
            </div> 
            <div class="form-group">
                @Html.LabelFor(model => model.Uploading, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Uploading, new { htmlAttributes = new { @style = "text-transform:uppercase", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Uploading, "", new { @class = "text-danger" })
                </div>
            </div> 
        </div>
    </div>

    <div class="modal-footer">
        <span id="progress" class="text-center" style="display: none;">
            <img src="/images/wait.gif" alt="wiat" />
            Wait..
        </span>

        <input class="btn btn-primary" type="submit" value="Save" />
        <button class="btn btn-warning" data-dismiss="modal">Close</button>
    </div>
}

<script>
        $("form").removeData("validator");
        $("form").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse("form");
</script>



